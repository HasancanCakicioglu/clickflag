package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"regexp"
	"sort"
	"strings"
)

func main() {
	fmt.Println("üîç Migration Validation Script - √úlke Kodlarƒ± Kontrol√º")
	fmt.Println(strings.Repeat("=", 60))

	// 1. Go constants dosyasƒ±ndan √ºlke kodlarƒ±nƒ± oku
	goConstants := readGoConstants()
	fmt.Printf("‚úÖ Go constants: %d √ºlke kodu bulundu\n", len(goConstants))

	// 2. Migration dosyasƒ±ndan CHECK constraint'teki √ºlke kodlarƒ±nƒ± oku
	checkConstraint := readCheckConstraint()
	fmt.Printf("‚úÖ CHECK constraint: %d √ºlke kodu bulundu\n", len(checkConstraint))

	// 3. Migration dosyasƒ±ndan INSERT satƒ±rlarƒ±ndaki √ºlke kodlarƒ±nƒ± oku
	insertCodes := readInsertCodes()
	fmt.Printf("‚úÖ INSERT satƒ±rlarƒ±: %d √ºlke kodu bulundu\n", len(insertCodes))

	fmt.Println("\n" + strings.Repeat("=", 60))
	fmt.Println("üìä KAR≈ûILA≈ûTIRMA SONU√áLARI")
	fmt.Println(strings.Repeat("=", 60))

	// 4. Go constants vs CHECK constraint kar≈üƒ±la≈ütƒ±rmasƒ±
	fmt.Println("\nüîç Go Constants vs CHECK Constraint:")
	compareCountryCodes(goConstants, checkConstraint, "Go Constants", "CHECK Constraint")

	// 5. Go constants vs INSERT satƒ±rlarƒ± kar≈üƒ±la≈ütƒ±rmasƒ±
	fmt.Println("\nüîç Go Constants vs INSERT Satƒ±rlarƒ±:")
	compareCountryCodes(goConstants, insertCodes, "Go Constants", "INSERT Satƒ±rlarƒ±")

	// 6. CHECK constraint vs INSERT satƒ±rlarƒ± kar≈üƒ±la≈ütƒ±rmasƒ±
	fmt.Println("\nüîç CHECK Constraint vs INSERT Satƒ±rlarƒ±:")
	compareCountryCodes(checkConstraint, insertCodes, "CHECK Constraint", "INSERT Satƒ±rlarƒ±")

	// 7. Genel √∂zet
	fmt.Println("\n" + strings.Repeat("=", 60))
	fmt.Println("üìã GENEL √ñZET")
	fmt.Println(strings.Repeat("=", 60))

	if len(goConstants) == len(checkConstraint) && len(goConstants) == len(insertCodes) {
		fmt.Println("üéâ T√úM √úLKE KODLARI E≈ûLE≈ûƒ∞YOR!")
		fmt.Printf("   Toplam: %d √ºlke kodu\n", len(goConstants))
	} else {
		fmt.Println("‚ö†Ô∏è  √úLKE KODLARINDA UYUMSUZLUK VAR!")
		fmt.Printf("   Go Constants: %d\n", len(goConstants))
		fmt.Printf("   CHECK Constraint: %d\n", len(checkConstraint))
		fmt.Printf("   INSERT Satƒ±rlarƒ±: %d\n", len(insertCodes))
	}
}

// readGoConstants: Go constants dosyasƒ±ndan √ºlke kodlarƒ±nƒ± okur
func readGoConstants() []string {
	file, err := os.Open("../constants/countries.go")
	if err != nil {
		log.Fatal("‚ùå Go constants dosyasƒ± a√ßƒ±lamadƒ±:", err)
	}
	defer file.Close()

	var codes []string
	scanner := bufio.NewScanner(file)

	// √úlke kodu regex pattern'i
	codePattern := regexp.MustCompile(`"([A-Z]{2})"`)

	for scanner.Scan() {
		line := scanner.Text()
		matches := codePattern.FindAllStringSubmatch(line, -1)
		for _, match := range matches {
			if len(match) > 1 {
				codes = append(codes, match[1])
			}
		}
	}

	sort.Strings(codes)
	return codes
}

// readCheckConstraint: Migration dosyasƒ±ndan CHECK constraint'teki √ºlke kodlarƒ±nƒ± okur
func readCheckConstraint() []string {
	file, err := os.Open("../migrations/001_create_countries_table.sql")
	if err != nil {
		log.Fatal("‚ùå Migration dosyasƒ± a√ßƒ±lamadƒ±:", err)
	}
	defer file.Close()

	var codes []string
	scanner := bufio.NewScanner(file)

	// CHECK constraint regex pattern'i
	checkPattern := regexp.MustCompile(`CHECK \(country_code IN \(([^)]+)\)`)

	for scanner.Scan() {
		line := scanner.Text()
		matches := checkPattern.FindStringSubmatch(line)
		if len(matches) > 1 {
			// √úlke kodlarƒ±nƒ± ayƒ±r ve temizle
			codesStr := matches[1]
			codesStr = strings.ReplaceAll(codesStr, "'", "")
			codesStr = strings.ReplaceAll(codesStr, " ", "")
			codes = strings.Split(codesStr, ",")
			break
		}
	}

	sort.Strings(codes)
	return codes
}

// readInsertCodes: Migration dosyasƒ±ndan INSERT satƒ±rlarƒ±ndaki √ºlke kodlarƒ±nƒ± okur
func readInsertCodes() []string {
	file, err := os.Open("../migrations/001_create_countries_table.sql")
	if err != nil {
		log.Fatal("‚ùå Migration dosyasƒ± a√ßƒ±lamadƒ±:", err)
	}
	defer file.Close()

	var codes []string
	scanner := bufio.NewScanner(file)

	// INSERT satƒ±rlarƒ± regex pattern'i - artƒ±k herhangi bir sayƒ± olabilir
	insertPattern := regexp.MustCompile(`\('([A-Z]{2})', \d+\)`)

	for scanner.Scan() {
		line := scanner.Text()
		matches := insertPattern.FindAllStringSubmatch(line, -1)
		for _, match := range matches {
			if len(match) > 1 {
				codes = append(codes, match[1])
			}
		}
	}

	sort.Strings(codes)
	return codes
}

// compareCountryCodes: ƒ∞ki √ºlke kodu listesini kar≈üƒ±la≈ütƒ±rƒ±r
func compareCountryCodes(list1, list2 []string, name1, name2 string) {
	// Set olu≈ütur
	set1 := make(map[string]bool)
	set2 := make(map[string]bool)

	for _, code := range list1 {
		set1[code] = true
	}
	for _, code := range list2 {
		set2[code] = true
	}

	// Eksik olanlarƒ± bul
	var missingIn2 []string
	for _, code := range list1 {
		if !set2[code] {
			missingIn2 = append(missingIn2, code)
		}
	}

	// Fazla olanlarƒ± bul
	var extraIn2 []string
	for _, code := range list2 {
		if !set1[code] {
			extraIn2 = append(extraIn2, code)
		}
	}

	// Sonu√ßlarƒ± yazdƒ±r
	if len(missingIn2) == 0 && len(extraIn2) == 0 {
		fmt.Printf("   ‚úÖ %s ve %s tamamen e≈üle≈üiyor\n", name1, name2)
	} else {
		if len(missingIn2) > 0 {
			fmt.Printf("   ‚ùå %s'de eksik olanlar (%d): %v\n", name2, len(missingIn2), missingIn2)
		}
		if len(extraIn2) > 0 {
			fmt.Printf("   ‚ùå %s'de fazla olanlar (%d): %v\n", name2, len(extraIn2), extraIn2)
		}
	}
}
